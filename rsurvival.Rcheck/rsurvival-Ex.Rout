
R version 3.5.0 (2017-01-27) -- "Joy in Playing"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "rsurvival"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> base::assign(".ExTimings", "rsurvival-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('rsurvival')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("AnalyseExpt")
> ### * AnalyseExpt
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: AnalyseExpt
> ### Title: A function to analyse a selection experiment, including observed
> ###   frequencies of genotype and probabilities that they are due to random
> ###   picking and positive selection.
> ### Aliases: AnalyseExpt
> 
> ### ** Examples
> 
> ## Not run: 
> ##D AnalyseExpt(gt, survival)
> ##D AnalyseExpt(gt, survival, min.freq.al = 0.1, location.cols = FALSE)
> ##D AnalyseExpt(gt, survival, deltas = FALSE, p.values = FALSE)
> ##D AnalyseExpt(gt, survival, backup.path = "example.csv")
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("AnalyseExpt", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("AnalyseSplittedExpt")
> ### * AnalyseSplittedExpt
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: AnalyseSplittedExpt
> ### Title: A function to analyse a selection experiment, including observed
> ###   frequencies of genotype and probabilities that they are due to random
> ###   picking and positive selection.
> ### Aliases: AnalyseSplittedExpt
> 
> ### ** Examples
> 
> ## Not run: 
> ##D AnalyseSplittedExpt(gt.alive, gt.dead)
> ##D AnalyseSplittedExpt(gt.alive, gt.dead, min.freq.al = 0.1)
> ##D AnalyseSplittedExpt(gt.alive, gt.dead, location.cols = FALSE)
> ##D AnalyseSplittedExpt(gt.alive, gt.dead, deltas = FALSE, p.values = FALSE)
> ##D AnalyseSplittedExpt(gt.alive, gt.dead, backup.path = "example.csv")
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("AnalyseSplittedExpt", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("CalcFreqGt")
> ### * CalcFreqGt
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: CalcFreqGt
> ### Title: A function to count occurences of genotypes in a genotype
> ###   matrix.
> ### Aliases: CalcFreqGt
> 
> ### ** Examples
> 
> ## Not run: 
> ##D CalcFreqGt(genotype)
> ##D CalcFreqGt(genotype, genotypic = FALSE, allelic = TRUE)
> ##D CalcFreqGt(genotype, absolute = FALSE, percentage = TRUE)
> ##D CalcFreqGt(genotype, backup.path = "example.csv")
> ##D CalcFreqGt(genotype, totals= FALSE, min.freq.al = 0.15)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("CalcFreqGt", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("CalcFreqVariant")
> ### * CalcFreqVariant
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: CalcFreqVariant
> ### Title: A function to count occurences of genotypes in a variant vector.
> ### Aliases: CalcFreqVariant
> 
> ### ** Examples
> 
> ## Not run: 
> ##D CalcFreqVariant(variant)
> ##D CalcFreqVariant(variant, genotypic = FALSE, allelic = TRUE)
> ##D CalcFreqVariant(variant, absolute = FALSE, percentage = TRUE)
> ##D CalcFreqVariant(variant, totals= FALSE, min.freq.al = 0.15)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("CalcFreqVariant", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("CalcOddedPick")
> ### * CalcOddedPick
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: CalcOddedPick
> ### Title: A function to calculate the number of picked lives per
> ###   categories of samples according to MWNCHypergeo model.
> ### Aliases: CalcOddedPick
> 
> ### ** Examples
> 
> ## Not run: 
> ##D CalcOddedPick(variant, survival)
> ##D CalcOddedPick(variant, survival, n = 1000)
> ##D CalcOddedPick(variant, survival, verbose = FALSE)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("CalcOddedPick", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("CalcProbsSelection")
> ### * CalcProbsSelection
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: CalcProbsSelection
> ### Title: A function to calculate probabilities that observed frequencies
> ###   are due to positive selection using MWNCHHypergeo model.
> ### Aliases: CalcProbsSelection
> 
> ### ** Examples
> 
> ## Not run: 
> ##D f.alive <- c(17, 3, 15, 1, 36)
> ##D f.all   <- c(24, 5, 22, 2, 53)
> ##D CalcProbsSelection(f.alive, f.all)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("CalcProbsSelection", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("CalcWeightsSurvival")
> ### * CalcWeightsSurvival
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: CalcWeightsSurvival
> ### Title: A function to calculate odds for positive selection from
> ###   observed selection frequencies using MWNCHHypergeo model.
> ### Aliases: CalcWeightsSurvival
> 
> ### ** Examples
> 
> ## Not run: 
> ##D f.alive <- c(17, 3, 15, 1, 36)
> ##D f.all  <- c(24, 5, 22, 2, 53)
> ##D CalcWeightsSurvival(f.alive, f.all)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("CalcWeightsSurvival", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("CensorLowDepth")
> ### * CensorLowDepth
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: CensorLowDepth
> ### Title: A function to replace genotype data with low depth by NA
> ### Aliases: CensorLowDepth
> 
> ### ** Examples
> 
> ## Not run: 
> ##D censorLowDepth(genotype, depth, 4)
> ##D censorLowDepth(genotype, depth, 4, verbose = FALSE)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("CensorLowDepth", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("ConvertFileToLogic")
> ### * ConvertFileToLogic
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: ConvertFileToLogic
> ### Title: A function to turn a file into a logical vector. Useful for
> ###   making a survivals vector to split your data in two parts.
> ### Aliases: ConvertFileToLogic
> 
> ### ** Examples
> 
> ## Not run: 
> ##D ConvertFileToLogic("myFile.txt")
> ##D ConvertFileToLogic("myFile.txt", type = "character")
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("ConvertFileToLogic", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("CountSignSnps")
> ### * CountSignSnps
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: CountSignSnps
> ### Title: A function to count snps with a low probability of being due to
> ###   a neutral model
> ### Aliases: CountSignSnps
> 
> ### ** Examples
> 
> ## Not run: 
> ##D CountSignSnps(probs)
> ##D CountSignSnps(probs, max.p.neutral = 0.05)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("CountSignSnps", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("EstimateFST")
> ### * EstimateFST
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: EstimateFST
> ### Title: A function to estimate the FST of a variant using the Weir &
> ###   Cockerham (1984) method
> ### Aliases: EstimateFST
> 
> ### ** Examples
> 
> ## Not run: 
> ##D EstimateFST(v1, v2)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("EstimateFST", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("ExtractGt")
> ### * ExtractGt
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: ExtractGt
> ### Title: A function to extract a genotype from a vcfR::VCF object.
> ### Aliases: ExtractGt
> 
> ### ** Examples
> 
> ## Not run: 
> ##D ExtractGt(vcf)
> ##D ExtractGt(vcf, min.sample.qual = 0.65, min.variant.qual = 0.4)
> ##D ExtractGt(vcf, min.depth = 4, verbose = FALSE)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("ExtractGt", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("FindIdsAlFreqs")
> ### * FindIdsAlFreqs
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: FindIdsAlFreqs
> ### Title: A function to find the ids of freq.al columns in a frequency
> ###   matrix.
> ### Aliases: FindIdsAlFreqs
> 
> ### ** Examples
> 
> ## Not run: 
> ##D FindIdsAlFeqs(freq)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("FindIdsAlFreqs", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("FindIdsGtCounts")
> ### * FindIdsGtCounts
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: FindIdsGtCounts
> ### Title: A function to find the ids of counts.gt columns in a frequency
> ###   matrix.
> ### Aliases: FindIdsGtCounts
> 
> ### ** Examples
> 
> ## Not run: 
> ##D FindIdsGtCounts(freq)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("FindIdsGtCounts", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("IsAtLeastNARatio")
> ### * IsAtLeastNARatio
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: IsAtLeastNARatio
> ### Title: A function to check if the ratio of NA in a vector is over a
> ###   threshold.
> ### Aliases: IsAtLeastNARatio
> 
> ### ** Examples
> 
> ## Not run: 
> ##D vector.true  <- c(NA, 1:3) 
> ##D vector.false <- c(NA, 1:5) 
> ##D IsAboveNARatio(vector.true, 0.2)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("IsAtLeastNARatio", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("IterRandPick")
> ### * IterRandPick
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: IterRandPick
> ### Title: A function to iterate significant snps counting in a genotype
> ###   matrx with a random permutation of the survival vector
> ### Aliases: IterRandPick
> 
> ### ** Examples
> 
> ## Not run: 
> ##D IterRandomPick(gt, survival)
> ##D IterRandomPick(gt, survival, max.p.neutral = 0.05)
> ##D IterRandomPick(gt, survival, iter = 1000, verbose = FALSE)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("IterRandPick", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("LoadVcf")
> ### * LoadVcf
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: LoadVcf
> ### Title: A function to get a filtered (and possibly splitted) vcfR::VCF
> ###   object from a VCF file.
> ### Aliases: LoadVcf
> 
> ### ** Examples
> 
> ## Not run: 
> ##D LoadVCF("example.vcf")
> ##D LoadVCF("example.vcf", survival = c(TRUE, FALSE, FALSE, TRUE, ...))
> ##D LoadVCF("example.vcf", survival = mySurvVector, verbose = FALSE)
> ##D LoadVCF("example.vcf", only.biallelic = FALSE, only.snp = FALSE)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("LoadVcf", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("OmitPoorSamples")
> ### * OmitPoorSamples
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: OmitPoorSamples
> ### Title: A function to remove columns with a high ratio of missing data
> ###   from a dataframe. (e.g. samples from genotype)
> ### Aliases: OmitPoorSamples
> 
> ### ** Examples
> 
> ## Not run: 
> ##D OmitPoorSamples(genotype, 0.15)
> ##D OmitPoorSamples(genotype, 0.2, dp = depth)
> ##D OmitPoorSamples(genotype, 0.2, verbose = FALSE)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("OmitPoorSamples", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("OmitPoorVariants")
> ### * OmitPoorVariants
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: OmitPoorVariants
> ### Title: A function to remove rows with a high ratio of missing data from
> ###   a dataframe. (e.g. variants from genotype)
> ### Aliases: OmitPoorVariants
> 
> ### ** Examples
> 
> ## Not run: 
> ##D OmitPoorVariants(genotype, 0.15)
> ##D OmitPoorVariants(genotype, 0.2, dp = depth)
> ##D OmitPoorVariants(genotype, 0.2, verbose = FALSE)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("OmitPoorVariants", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("PermutRandSurv")
> ### * PermutRandSurv
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: PermutRandSurv
> ### Title: A function to calculate probabilities of neutral model and
> ###   positive selection model from a genotype matrix whit a randomly
> ###   shuffled survival vector
> ### Aliases: PermutRandSurv
> 
> ### ** Examples
> 
> ## Not run: 
> ##D PermutRandSurv(gt, c(TRUE, TRUE, FALSE, ...))
> ##D PermutRandSurv(gt, survival, verbose = FALSE)
> ##D PermutRandSurv(gt, survival, odded.lives = c("HETERO" = 32, "HOMOREF" = 18, ...
> ##D ), odded.samples = list("HETERO" = c(1,3,7,45,141), ...)))
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("PermutRandSurv", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("RmIndels")
> ### * RmIndels
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: RmIndels
> ### Title: A function to remove indel variants from a vcfR::VCF object
> ### Aliases: RmIndels
> 
> ### ** Examples
> 
> ## Not run: 
> ##D RmIndels(vcf)
> ##D RmIndels(vcf, verbose = FALSE)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("RmIndels", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("RmNonBiallelics")
> ### * RmNonBiallelics
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: RmNonBiallelics
> ### Title: A function to remove non-biallelic variants from a vcfR::VCF
> ###   object
> ### Aliases: RmNonBiallelics
> 
> ### ** Examples
> 
> ## Not run: 
> ##D RmNonBiallelics(vcf)
> ##D RmNonBiallelics(vcf, verbose = FALSE)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("RmNonBiallelics", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("SliceDfColumns")
> ### * SliceDfColumns
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: SliceDfColumns
> ### Title: A function to slice data frames without loosing column names
> ### Aliases: SliceDfColumns
> 
> ### ** Examples
> 
> ## Not run: 
> ##D SliceDfColumns(df, 1)
> ##D SliceDfColumns(df, 1:5)
> ##D SliceDfColumns(df, c(1,3,5))
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("SliceDfColumns", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("SliceDfRows")
> ### * SliceDfRows
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: SliceDfRows
> ### Title: A function to slice data frames without loosing row names
> ### Aliases: SliceDfRows
> 
> ### ** Examples
> 
> ## Not run: 
> ##D SliceDfRows(df, 1)
> ##D SliceDfRows(df, 1:5)
> ##D SliceDfRows(df, c(1,3,5))
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("SliceDfRows", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("SplitGt")
> ### * SplitGt
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: SplitGt
> ### Title: A function to split a genotype matrix two genotype matrix
> ###   according to a logical vector
> ### Aliases: SplitGt
> 
> ### ** Examples
> 
> ## Not run: 
> ##D SplitGt(gt, c(TRUE, TRUE, FALSE, ...))
> ##D SplitGt(gt, survival.vector, verbose = FALSE)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("SplitGt", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("SplitVcf")
> ### * SplitVcf
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: SplitVcf
> ### Title: A function to split a vcfR::VCF object in two vcfR::VCF object
> ###   according to a logical vector
> ### Aliases: SplitVcf
> 
> ### ** Examples
> 
> ## Not run: 
> ##D SplitVcf(vcf, c(TRUE, TRUE, FALSE, ...))
> ##D SplitVcf(vcf, survival.vector, verbose = FALSE)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("SplitVcf", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("SplitVect")
> ### * SplitVect
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: SplitVect
> ### Title: A function to split a vector into two vectors according to a
> ###   survival logical vector
> ### Aliases: SplitVect
> 
> ### ** Examples
> 
> ## Not run: 
> ##D SplitGt(gt, c(TRUE, TRUE, FALSE, ...))
> ##D SplitGt(gt, survival.vector, verbose = FALSE)
> ## End(Not run)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("SplitVect", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> cleanEx()
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.148 0.016 0.164 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
